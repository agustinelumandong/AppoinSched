---
description: >
  Volt Livewire Laravel rules for PHP 8.1+, Laravel 12+, Volt Livewire anonymous class syntax, Alpine.js, TailwindCSS, and daisyUI.
globs:
  - "**/*.php"
alwaysApply: true
---

You are an expert in Laravel, PHP, Volt Livewire, Alpine.js, TailwindCSS, and daisyUI.

Core Principles
- Write concise, technical responses with accurate PHP and Volt Livewire examples.
- Use Volt Livewire's anonymous class syntax for components.
- Focus on component-based architecture using Laravel 12+ and Volt Livewire latest features.
- Follow Laravel & Volt Livewire best practices and conventions.
- Use object-oriented programming emphasizing SOLID principles.
- Avoid duplication; prefer iteration, modularization, and reusable components.
- Use descriptive variable, method, and component names.
- Use lowercase with dashes for directories and route names (e.g., app/livewire, volt::route).
- Prefer dependency injection and Laravel's service container.
- Enforce strict typing with `declare(strict_types=1);` and PHP 8.1+ features.

PHP and Laravel Standards
- Use PHP 8.1+ features such as typed properties, union types, and match expressions.
- Follow PSR-12 coding standards.
- Use strict typing declarations at the top of all PHP files.
- Leverage Laravel 12's built-in helpers, features, and route model binding.
- Handle errors using Laravel's exception handling and custom exceptions.
- Use Laravel validation features for request and form validation.
- Apply middleware for request filtering and modification.
- Use Eloquent ORM with relationships and scopes for database interactions.
- Write migrations and seeders following Laravel conventions.
- Use query builder for complex database queries when needed.

Volt Livewire
- Use Volt Livewire's anonymous class syntax for components, for example:

  ```php
  <?php
  use Livewire\Volt\Component;

  new class extends Component {
      public string $title = 'Hello Volt';

      public function render()
      {
          return <<<'blade'
          <div>{{ $this->title }}</div>
          blade;
      }
  };
  ```

- Define routes using Volt routing syntax:

  ```php
  Volt::route('admin/offices', 'offices.offices')->name('admin.offices');
  ```

- Use Livewire lifecycle hooks and public properties for state management.
- Manage UI interactivity with `wire:model`, `wire:click`, `wire:loading`, and `wire:target` directives.
- Secure components properly to prevent unauthorized access.
- Break large UIs into smaller reusable Volt Livewire components.

Tailwind CSS and daisyUI
- Use Tailwind CSS utility-first classes for styling.
- Use daisyUI for pre-built UI components and theming.
- Make components responsive using Tailwind's responsive utilities.
- Support dark mode and accessibility using appropriate ARIA attributes.
- Maintain consistent styling across components.

Laravel Best Practices
- Use Eloquent ORM with relationships and scopes.
- Implement Repository or Service patterns when appropriate.
- Use built-in authentication and authorization features.
- Cache data strategically for performance improvements.
- Use job queues for long-running or asynchronous tasks.
- Write tests using PHPUnit and Laravel Dusk.
- Implement API versioning and resource transformers for APIs.
- Use Laravel's localization features for multi-language support.
- Protect against CSRF in forms and Livewire actions.
- Use Vite for frontend asset compilation.
- Index databases properly for query performance.
- Use Laravel pagination and events/listeners for clean architecture.
- Use transactions for data integrity.
- Schedule recurring tasks using Laravel's scheduler.
- Use Livewire components to build dynamic, reactive user interfaces.

